[{"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\index.js":"1","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\App.js":"2","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\reportWebVitals.js":"3","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\sideMenu.js":"4","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\Header.js":"5","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\PageHeader.js":"6","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\Pages\\Employess\\Employee.js":"7","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\Pages\\Employess\\EmployeeForm.js":"8","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\UseForm.js":"9","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\input.js":"10","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\Controls.js":"11","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\RadioGroup.js":"12","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\Select.js":"13","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\Services\\EmployeeService.js":"14","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\CheckBox.js":"15","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\DatePicker.js":"16","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\Button.js":"17","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\UseTable.js":"18","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\Popup.js":"19","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\ActionButton.js":"20","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\Notifications.js":"21","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\ConfirmDialog.js":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":883,"mtime":1610526367823,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":481,"mtime":1610451056841,"results":"27","hashOfConfig":"24"},{"size":1837,"mtime":1610470921256,"results":"28","hashOfConfig":"24"},{"size":1163,"mtime":1610470679416,"results":"29","hashOfConfig":"24"},{"size":6149,"mtime":1610810275809,"results":"30","hashOfConfig":"24"},{"size":4045,"mtime":1610722332564,"results":"31","hashOfConfig":"24"},{"size":1100,"mtime":1610594267624,"results":"32","hashOfConfig":"24"},{"size":426,"mtime":1610698165747,"results":"33","hashOfConfig":"24"},{"size":377,"mtime":1610719304932,"results":"34","hashOfConfig":"24"},{"size":717,"mtime":1610547808660,"results":"35","hashOfConfig":"24"},{"size":768,"mtime":1610636086113,"results":"36","hashOfConfig":"24"},{"size":1633,"mtime":1610806538607,"results":"37","hashOfConfig":"24"},{"size":729,"mtime":1610550330442,"results":"38","hashOfConfig":"24"},{"size":737,"mtime":1610554798513,"results":"39","hashOfConfig":"24"},{"size":672,"mtime":1610554523216,"results":"40","hashOfConfig":"24"},{"size":3533,"mtime":1610700344024,"results":"41","hashOfConfig":"24"},{"size":1309,"mtime":1610719987939,"results":"42","hashOfConfig":"24"},{"size":773,"mtime":1610719248902,"results":"43","hashOfConfig":"24"},{"size":449,"mtime":1610812804028,"results":"44","hashOfConfig":"24"},{"size":1917,"mtime":1610809915877,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1unnt0p",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\index.js",[],["96","97"],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\App.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\reportWebVitals.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\sideMenu.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\Header.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\PageHeader.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\Pages\\Employess\\Employee.js",["98"],"import React, { useState } from \"react\";\r\nimport EmployeeForm from \"./EmployeeForm\";\r\nimport PageHeader from \"../../components/PageHeader\";\r\nimport PeopleOutlineIcon from \"@material-ui/icons/PeopleOutline\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {\r\n  Paper,\r\n  makeStyles,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Toolbar,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport useTable from \"../../components/UseTable\";\r\nimport Popup from \"../../components/Popup\";\r\nimport * as EmployeeService from \"../../Services/EmployeeService\";\r\nimport { EditOutlined, Search } from \"@material-ui/icons\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { Controls } from \"../../components/controls/Controls\";\r\nimport Notifications from \"../../components/Notifications\";\r\nimport ConfirmDialog from \"../../components/ConfirmDialog\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  pageContent: {\r\n    margin: theme.spacing(5),\r\n    padding: theme.spacing(3),\r\n  },\r\n  searchInput: {\r\n    width: \"75%\",\r\n  },\r\n  newButton: {\r\n    position: \"absolute\",\r\n    right: \"10px\",\r\n  },\r\n}));\r\n\r\nconst tableHead = [\r\n  { id: \"fullName\", label: \"Name\" },\r\n  { id: \"email\", label: \"Email Adress\" },\r\n  { id: \"mobile\", label: \"Mobile\" },\r\n  { id: \"department\", label: \"Department\" },\r\n  { id: \"actions\", label: \"Actions\", desableSorting: true },\r\n];\r\n\r\nfunction Employee() {\r\n  const [recordForEdit, setRecordForEdit] = useState(null);\r\n\r\n  const classes = useStyles();\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [records, setRecords] = useState(EmployeeService.getAllEmployees());\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    isOpen: false,\r\n    title: \"\",\r\n    subTitle: \"\",\r\n  });\r\n  const [filterFn, setFilterFn] = useState({\r\n    fn: (items) => {\r\n      return items;\r\n    },\r\n  });\r\n\r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const {\r\n    TblContainer,\r\n    TblHeader,\r\n    TblePagination,\r\n    recordsAsPerPagingAndSorting,\r\n  } = useTable(records, tableHead, filterFn);\r\n\r\n  const handleSearch = (e) => {\r\n    let target = e.target;\r\n    setFilterFn({\r\n      fn: (item) => {\r\n        if (target.value === \"\") return item;\r\n        else\r\n          return item.filter((x) =>\r\n            x.fullName.toLowerCase().includes(target.value)\r\n          );\r\n      },\r\n    });\r\n  };\r\n\r\n  const openInPopup = (item) => {\r\n    setRecordForEdit(item);\r\n    setOpenPopup(true);\r\n  };\r\n\r\n  const addOrEdit = (employee, resetForm) => {\r\n    if (employee.id === 0) EmployeeService.insertEmloyee(employee);\r\n    else EmployeeService.updateEmployee(employee);\r\n    resetForm();\r\n    setRecordForEdit(null);\r\n    setOpenPopup(false);\r\n    setRecords(EmployeeService.getAllEmployees());\r\n\r\n    setNotify({\r\n      isOpen: true,\r\n      message: \"Submitted Successfully\",\r\n      type: \"success\",\r\n    });\r\n  };\r\n\r\n  const onDelete = (id) => {\r\n    setConfirmDialog({ ...confirmDialog, isOpen: false });\r\n    EmployeeService.deleteEmployee(id);\r\n    setRecords(EmployeeService.getAllEmployees());\r\n    setNotify({\r\n      isOpen: true,\r\n      message: \"Deleted Successfully\",\r\n      type: \"error\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title=\"New Employee\"\r\n        subTitle=\"Form design with validation\"\r\n        icon={<PeopleOutlineIcon fontSize=\"large\" />}\r\n      />\r\n      <Paper className={classes.pageContent}>\r\n        <Toolbar>\r\n          <Controls.Input\r\n            className={classes.searchInput}\r\n            label=\"Search Employees\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <Search />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            onChange={handleSearch}\r\n          />\r\n          <Controls.Button\r\n            className={classes.newButton}\r\n            text=\"Add New\"\r\n            variant=\"outlined\"\r\n            startIcon={<AddIcon />}\r\n            onClick={() => {\r\n              setOpenPopup(true);\r\n              setRecordForEdit(null);\r\n            }}\r\n          />\r\n        </Toolbar>\r\n        <TblContainer>\r\n          <TblHeader />\r\n          <TableBody>\r\n            {recordsAsPerPagingAndSorting().map((item) => (\r\n              <TableRow key={item.id}>\r\n                <TableCell>{item.fullName}</TableCell>\r\n                <TableCell>{item.email}</TableCell>\r\n                <TableCell>{item.mobile}</TableCell>\r\n                <TableCell>{item.department}</TableCell>\r\n                <TableCell>\r\n                  <Controls.ActionButton color=\"primary\">\r\n                    <EditOutlinedIcon\r\n                      fontSize=\"small\"\r\n                      onClick={() => {\r\n                        openInPopup(item);\r\n                      }}\r\n                    />\r\n                  </Controls.ActionButton>\r\n\r\n                  <Controls.ActionButton\r\n                    color=\"secondary\"\r\n                    onClick={() => {\r\n                      setConfirmDialog({\r\n                        isOpen: true,\r\n                        title: \"Are you sure?\",\r\n                        subTitle: \"You can't undo this\",\r\n                        onConfirm: () => {\r\n                          onDelete(item.id);\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    <CloseIcon fontSize=\"small\" />\r\n                  </Controls.ActionButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </TblContainer>\r\n        <TblePagination />\r\n      </Paper>\r\n      <Popup\r\n        title=\"Employee Form\"\r\n        openPopup={openPopup}\r\n        setOpenPopup={setOpenPopup}\r\n      >\r\n        <EmployeeForm recordForEdit={recordForEdit} addOrEdit={addOrEdit} />\r\n      </Popup>\r\n      <Notifications notify={notify} setNotify={setNotify} />\r\n      <ConfirmDialog\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n}\r\nexport default Employee;\r\n","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\Pages\\Employess\\EmployeeForm.js",["99","100"],"import { Grid } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Controls } from \"../../components/controls/Controls\";\r\n\r\nimport { useForm, Form } from \"../../components/UseForm\";\r\nimport * as employeeService from \"../../Services/EmployeeService\";\r\nconst initialFValues = {\r\n  id: 0,\r\n  fullName: \"\",\r\n  email: \"\",\r\n  mobile: \"\",\r\n  city: \"\",\r\n  gender: \"male\",\r\n  departmentId: \"\",\r\n  hireDate: new Date(),\r\n  isPermanent: false,\r\n};\r\nconst genderItems = [\r\n  { id: \"male\", title: \"Male\" },\r\n  { id: \"female\", title: \"Female\" },\r\n  { id: \"other\", title: \"other\" },\r\n];\r\n\r\nfunction EmployeeForm(props) {\r\n  const { addOrEdit, recordForEdit } = props;\r\n  const validate = (fieldValues = values) => {\r\n    let temp = {};\r\n    if (\"fullName\" in fieldValues)\r\n      temp.fullName = fieldValues.fullName ? \"\" : \"This field is required\";\r\n    if (\"email\" in fieldValues)\r\n      temp.email = /$^|.*@.*..*/.test(fieldValues.email)\r\n        ? \"\"\r\n        : \"Email is not valid\";\r\n    if (\"mobile\" in fieldValues)\r\n      temp.mobile =\r\n        fieldValues.mobile.length > 10 ? \"\" : \"Mobile number is not validated\";\r\n    if (\"departmentId\" in fieldValues)\r\n      temp.departmentId =\r\n        fieldValues.departmentId.length !== 0 ? \"\" : \"This field is required\";\r\n    setErrors({ ...temp });\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (recordForEdit != null) {\r\n      setValues({\r\n        ...recordForEdit,\r\n      });\r\n    }\r\n  }, [recordForEdit]);\r\n\r\n  const {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n  } = useForm(initialFValues, true, validate);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      addOrEdit(values, resetForm);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Grid container>\r\n        <Grid item xs={6}>\r\n          <Controls.Input\r\n            name=\"fullName\"\r\n            label=\"Full Name\"\r\n            value={values.fullName}\r\n            onChange={handleInputChange}\r\n            error={errors.fullName}\r\n          />\r\n          <Controls.Input\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            value={values.email}\r\n            onChange={handleInputChange}\r\n            error={errors.email}\r\n          />\r\n\r\n          <Controls.Input\r\n            name=\"mobile\"\r\n            label=\"Mobile\"\r\n            value={values.mobile}\r\n            onChange={handleInputChange}\r\n            error={errors.mobile}\r\n          />\r\n\r\n          <Controls.Input\r\n            name=\"city\"\r\n            label=\"City\"\r\n            value={values.city}\r\n            onChange={handleInputChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Controls.RadioGroup\r\n            label=\"Gender\"\r\n            name=\"gender\"\r\n            value={values.gender}\r\n            onChange={handleInputChange}\r\n            items={genderItems}\r\n          />\r\n          <Controls.Select\r\n            name=\"departmentId\"\r\n            label=\"Department\"\r\n            value={values.departmentId}\r\n            onChange={handleInputChange}\r\n            options={employeeService.getDepartmentCollection()}\r\n            error={errors.departmentId}\r\n          />\r\n          <Controls.DatePicker\r\n            name=\"hireDate\"\r\n            label=\"Hire Date\"\r\n            value={values.hireDate}\r\n            onChange={handleInputChange}\r\n          />\r\n          <Controls.CheckBox\r\n            name=\"isPermanent\"\r\n            label=\"Permanent Employee\"\r\n            value={values.isPermanent}\r\n            onChange={handleInputChange}\r\n          />\r\n          <div>\r\n            <Controls.Button text=\"Submit\" type=\"submit\" />\r\n            <Controls.Button\r\n              text=\"Reset\"\r\n              color=\"default\"\r\n              type=\"button\"\r\n              onClick={resetForm}\r\n            />\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default EmployeeForm;\r\n","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\UseForm.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\input.js",[],["101","102"],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\Controls.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\RadioGroup.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\Select.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\Services\\EmployeeService.js",["103"],"const KEYS = {\r\n  employees: \"employees\",\r\n  employeeId: \"employeeId\",\r\n};\r\n\r\nexport const getDepartmentCollection = () => {\r\n  return [\r\n    { id: 1, title: \"Development\" },\r\n    { id: 2, title: \"Marketing\" },\r\n    { id: 3, title: \"Accounting\" },\r\n    { id: 4, title: \"HR\" },\r\n  ];\r\n};\r\nexport function insertEmloyee(data) {\r\n  let employees = getAllEmployees();\r\n  data[\"id\"] = generateEmployeeId();\r\n  employees.push(data);\r\n  localStorage.setItem(KEYS.employees, JSON.stringify(employees));\r\n}\r\n\r\nexport function generateEmployeeId() {\r\n  if (localStorage.getItem(KEYS.employeeId) === null)\r\n    localStorage.setItem(KEYS.employeeId, \"0\");\r\n\r\n  var id = parseInt(localStorage.getItem(KEYS.employeeId));\r\n  localStorage.setItem(KEYS.employeeId, (++id).toString());\r\n\r\n  return id;\r\n}\r\n\r\nexport function getAllEmployees() {\r\n  if (localStorage.getItem(KEYS.employees) === null)\r\n    localStorage.setItem(KEYS.employees, JSON.stringify([]));\r\n  let employees = JSON.parse(localStorage.getItem(KEYS.employees));\r\n  let departments = getDepartmentCollection();\r\n  return employees.map((x) => ({\r\n    ...x,\r\n    department: departments[x.departmentId - 1].title,\r\n  }));\r\n}\r\n\r\nexport function deleteEmployee(id) {\r\n  let employees = getAllEmployees();\r\n  employees = employees.filter((x) => x.id != id);\r\n  localStorage.setItem(KEYS.employees, JSON.stringify(employees));\r\n}\r\n\r\nexport function updateEmployee(data) {\r\n  let employees = getAllEmployees();\r\n  let recordIndex = employees.findIndex((x) => x.id === data.id);\r\n  employees[recordIndex] = { ...data };\r\n  localStorage.setItem(KEYS.employees, JSON.stringify(employees));\r\n}\r\n","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\CheckBox.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\DatePicker.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\Button.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\UseTable.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\Popup.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\controls\\ActionButton.js",[],"C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\Notifications.js",["104"],"import { Snackbar } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nexport default function Notifications(props) {\r\n  const { notify, setNotify } = props;\r\n  return (\r\n    <Snackbar\r\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n      open={notify.isOpen}\r\n      autoHideDuration={100}\r\n    >\r\n      <Alert severity={notify.type}>{notify.message}</Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","C:\\Users\\Sabri\\Desktop\\html\\material ui\\newweb\\src\\components\\ConfirmDialog.js",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":19,"column":10,"nodeType":"111","messageId":"112","endLine":19,"endColumn":22},{"ruleId":"109","severity":1,"message":"113","line":2,"column":17,"nodeType":"111","messageId":"112","endLine":2,"endColumn":25},{"ruleId":"114","severity":1,"message":"115","line":51,"column":6,"nodeType":"116","endLine":51,"endColumn":21,"suggestions":"117"},{"ruleId":"105","replacedBy":"118"},{"ruleId":"107","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":44,"column":44,"nodeType":"122","messageId":"123","endLine":44,"endColumn":46},{"ruleId":"109","severity":1,"message":"124","line":5,"column":19,"nodeType":"111","messageId":"112","endLine":5,"endColumn":28},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'EditOutlined' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setValues'. Either include it or remove the dependency array.","ArrayExpression",["127"],["125"],["126"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setNotify' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},"Update the dependencies array to be: [recordForEdit, setValues]",{"range":"130","text":"131"},[1546,1561],"[recordForEdit, setValues]"]